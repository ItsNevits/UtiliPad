---
import type { Language } from "@/types/language.type";
import { getTranslation } from "@/i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="space-y-6 mt-6">
  <!-- Input Card -->
  <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6">
    <label for="qr-input" class="block text-sm font-semibold text-neutral-800 mb-3">
      {getTranslation(lang, "components.qrGenerator.inputTitle")}
    </label>
    <input
      id="qr-input"
      type="text"
      class="w-full px-4 py-3 bg-white border border-neutral-300 rounded-lg text-neutral-700 placeholder:text-neutral-500 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-all shadow-sm"
      placeholder={getTranslation(lang, "components.qrGenerator.inputPlaceholder")}
    />

    <button
      id="generate-qr"
      type="button"
      class="cursor-pointer mt-4 px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors text-sm font-semibold shadow-sm w-full sm:w-auto"
    >
      {getTranslation(lang, "components.qrGenerator.generate")}
    </button>
  </div>

  <!-- QR Output Card -->
  <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6 hidden" id="qr-section">
    <div class="mb-4">
      <h3 class="text-base font-bold text-neutral-800 mb-1">
        {getTranslation(lang, "components.qrGenerator.qrCodeTitle")}
      </h3>
      <p class="text-sm text-neutral-600">
        {getTranslation(lang, "components.qrGenerator.qrCodeDescription")}
      </p>
    </div>

    <div
      id="qr-code"
      class="my-6 flex flex-col items-center justify-center border-2 border-dashed border-neutral-300 rounded-xl p-8 min-h-64 w-full bg-neutral-50"
    >
    </div>

    <!-- Download Buttons -->
    <div id="download-buttons" class="hidden">
      <div class="flex flex-col sm:flex-row gap-3">
        <button
          id="download-png"
          type="button"
          class="cursor-pointer w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors font-semibold focus:outline-none focus:ring-2 focus:ring-emerald-500/50 shadow-sm"
        >
          {getTranslation(lang, "common.download")} PNG
        </button>

        <button
          id="download-svg"
          type="button"
          class="cursor-pointer w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 bg-white border border-neutral-300 hover:border-neutral-400 text-neutral-700 rounded-lg transition-all font-medium shadow-sm hover:shadow"
        >
          {getTranslation(lang, "common.download")} SVG
        </button>

        <button
          id="share-qr"
          type="button"
          class="cursor-pointer w-full sm:w-auto flex items-center justify-center gap-2 px-6 py-2.5 bg-white border border-neutral-300 hover:border-neutral-400 text-neutral-700 rounded-lg transition-all font-medium shadow-sm hover:shadow"
        >
          <span>{getTranslation(lang, "components.qrGenerator.share")}</span>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { actions } from "astro:actions";
  import QRCode from "qr-code-styling";

  document.addEventListener("DOMContentLoaded", () => {
    const generateQrButton = document.getElementById("generate-qr") as HTMLButtonElement;
    const downloadButtons = document.getElementById("download-buttons") as HTMLDivElement;
    const downloadPngButton = document.getElementById("download-png") as HTMLButtonElement;
    const downloadSvgButton = document.getElementById("download-svg") as HTMLButtonElement;
    const shareButton = document.getElementById("share-qr") as HTMLButtonElement;

    if (!generateQrButton || !downloadButtons || !downloadPngButton || !downloadSvgButton || !shareButton) return;

    let currentQr: QRCode | null = null;
    let currentData: string = "";

    function GenerateQr() {
      try {
        const qrCodeContainer = document.getElementById("qr-code") as HTMLDivElement;
        const qrInput = document.getElementById("qr-input") as HTMLInputElement;
        const qrSection = document.getElementById("qr-section") as HTMLDivElement;

        if (!qrInput.value.trim()) {
          downloadButtons.classList.add("hidden");
          qrSection.classList.add("hidden");
          return;
        }

        currentData = qrInput.value.trim();

        const containerWidth = qrCodeContainer.clientWidth;
        const maxSize = Math.min(containerWidth - 48, 320);
        const qrSize = Math.max(200, maxSize);

        currentQr = new QRCode({
          width: qrSize,
          height: qrSize,
          type: "svg",
          data: currentData,
          image: "",
          dotsOptions: {
            color: "#10B981",
            type: "rounded",
          },
          backgroundOptions: {
            color: "#FFFFFF",
          },
          imageOptions: {
            crossOrigin: "anonymous",
            margin: 20,
          },
        });

        qrCodeContainer.innerHTML = "";
        currentQr.append(qrCodeContainer);

        const svgElement = qrCodeContainer.querySelector("svg");
        if (svgElement) {
          svgElement.style.width = "100%";
          svgElement.style.height = "auto";
          svgElement.style.maxWidth = "320px";
          svgElement.setAttribute("viewBox", `0 0 ${qrSize} ${qrSize}`);
        }

        downloadButtons.classList.remove("hidden");
        qrSection.classList.remove("hidden");
      } catch (error) {
        console.error("Error generando el código QR:", error);
      } finally {
        actions.createUpdateProcessCount({ process_name: "qr-generator" });
      }
    }

    async function downloadQrAsPng() {
      if (!currentQr) return;
      try {
        await currentQr.download({
          name: `qr-code-${Date.now()}`,
          extension: "png",
        });
      } catch (error) {
        console.error("Error descargando PNG:", error);
        downloadQrFallback("png");
      }
    }

    async function downloadQrAsSvg() {
      if (!currentQr) return;
      try {
        await currentQr.download({
          name: `qr-code-${Date.now()}`,
          extension: "svg",
        });
      } catch (error) {
        console.error("Error descargando SVG:", error);
        downloadQrFallback("svg");
      }
    }

    function downloadQrFallback(format: "png" | "svg") {
      const qrElement = document.querySelector("#qr-code svg") as SVGElement;
      if (!qrElement) return;

      if (format === "svg") {
        const svgData = new XMLSerializer().serializeToString(qrElement);
        const svgBlob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
        const url = URL.createObjectURL(svgBlob);

        const a = document.createElement("a");
        a.href = url;
        a.download = `qr-code-${Date.now()}.svg`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } else {
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        const img = new Image();

        img.onload = () => {
          const downloadSize = 512;
          canvas.width = downloadSize;
          canvas.height = downloadSize;
          ctx?.drawImage(img, 0, 0, downloadSize, downloadSize);

          canvas.toBlob((blob) => {
            if (blob) {
              const url = URL.createObjectURL(blob);
              const a = document.createElement("a");
              a.href = url;
              a.download = `qr-code-${Date.now()}.png`;
              document.body.appendChild(a);
              a.click();
              document.body.removeChild(a);
              URL.revokeObjectURL(url);
            }
          }, "image/png");
        };

        const svgData = new XMLSerializer().serializeToString(qrElement);
        const svgBlob = new Blob([svgData], { type: "image/svg+xml;charset=utf-8" });
        const url = URL.createObjectURL(svgBlob);
        img.src = url;
      }
    }

    async function shareQr() {
      if (!currentData) return;
      if (navigator.share) {
        try {
          await navigator.share({
            title: "Código QR generado",
            text: `Código QR para: ${currentData}`,
            url: window.location.href,
          });
        } catch (error) {
          console.error("Error compartiendo:", error);
        }
      }
    }

    generateQrButton.addEventListener("click", GenerateQr);
    downloadPngButton.addEventListener("click", downloadQrAsPng);
    downloadSvgButton.addEventListener("click", downloadQrAsSvg);

    if (!navigator.share) {
      shareButton.classList.add("hidden");
    } else {
      shareButton.classList.remove("hidden");
    }

    shareButton.classList.add("hidden");

    const qrInput = document.getElementById("qr-input") as HTMLInputElement;
    qrInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        GenerateQr();
      }
    });

    function resizeQr() {
      if (!currentQr || !currentData) return;
      const qrCodeContainer = document.getElementById("qr-code") as HTMLDivElement;
      const svgElement = qrCodeContainer.querySelector("svg");
      if (svgElement) {
        svgElement.style.width = "100%";
        svgElement.style.height = "auto";
        svgElement.style.maxWidth = "320px";
      }
    }

    let resizeTimeout: ReturnType<typeof setTimeout>;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(resizeQr, 150);
    });
  });
</script>
