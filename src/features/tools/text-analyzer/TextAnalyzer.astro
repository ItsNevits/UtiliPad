---
import type { Language } from "@/types/language.type";
import { getTranslation } from "@/i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="space-y-6 mt-6">
  <!-- Área de texto -->
  <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6">
    <label class="block text-sm font-semibold text-neutral-800 mb-3">
      {getTranslation(lang, "components.textAnalyzer.inputTitle")}
    </label>
    <textarea
      id="text-input"
      placeholder={getTranslation(
        lang,
        "components.textAnalyzer.inputPlaceholder"
      )}
      class="w-full h-64 p-4 bg-white border border-neutral-300 rounded-lg text-neutral-700 placeholder:text-neutral-500 resize-none focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-all shadow-sm font-normal"
    ></textarea>
  </div>

  <!-- Estadísticas principales -->
  <div class="grid grid-cols-2 sm:grid-cols-4 gap-4">
    <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-5 text-center hover:shadow-md transition-shadow">
      <div class="text-3xl font-bold text-emerald-600 tabular-nums mb-1" id="word-count">0</div>
      <div class="text-xs font-medium text-neutral-600 uppercase tracking-wide">
        {getTranslation(lang, "components.textAnalyzer.Words")}
      </div>
    </div>
    <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-5 text-center hover:shadow-md transition-shadow">
      <div class="text-3xl font-bold text-emerald-600 tabular-nums mb-1" id="char-count">0</div>
      <div class="text-xs font-medium text-neutral-600 uppercase tracking-wide">
        {getTranslation(lang, "components.textAnalyzer.Characters")}
      </div>
    </div>
    <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-5 text-center hover:shadow-md transition-shadow">
      <div class="text-3xl font-bold text-emerald-600 tabular-nums mb-1" id="char-no-spaces">
        0
      </div>
      <div class="text-xs font-medium text-neutral-600 uppercase tracking-wide">
        {getTranslation(lang, "components.textAnalyzer.WhitOutSpaces")}
      </div>
    </div>
    <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-5 text-center hover:shadow-md transition-shadow">
      <div class="text-3xl font-bold text-emerald-600 tabular-nums mb-1" id="paragraph-count">
        0
      </div>
      <div class="text-xs font-medium text-neutral-600 uppercase tracking-wide">
        {getTranslation(lang, "components.textAnalyzer.Paragraphs")}
      </div>
    </div>
  </div>

  <!-- Información adicional -->
  <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6">
    <h4 class="text-base font-bold text-neutral-800 mb-4">
      {getTranslation(lang, "components.textAnalyzer.AdditionalInfo")}
    </h4>
    <div class="flex items-center gap-2">
      <span class="text-sm font-medium text-neutral-600">
        {getTranslation(lang, "components.textAnalyzer.UniqueWords")}:
      </span>
      <span id="unique-words" class="text-lg font-bold text-emerald-600 tabular-nums">0</span>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const textInput = document.getElementById(
      "text-input"
    ) as HTMLTextAreaElement;
    const wordCount = document.getElementById("word-count") as HTMLElement;
    const charCount = document.getElementById("char-count") as HTMLElement;
    const charNoSpaces = document.getElementById(
      "char-no-spaces"
    ) as HTMLElement;
    const paragraphCount = document.getElementById(
      "paragraph-count"
    ) as HTMLElement;
    const readingTime = document.getElementById("reading-time") as HTMLElement;
    const uniqueWords = document.getElementById("unique-words") as HTMLElement;

    // si algun elemento no existe, salir
    if (
      !textInput ||
      !wordCount ||
      !charCount ||
      !charNoSpaces ||
      !paragraphCount ||
      !uniqueWords
    )
      return;

    function updateStats() {
      const text = textInput.value;

      // Contar palabras
      const words = text.trim() === "" ? 0 : text.trim().split(/\s+/).length;
      wordCount.textContent = words.toString();

      // Contar caracteres
      charCount.textContent = text.length.toString();

      // Caracteres sin espacios
      charNoSpaces.textContent = text.replace(/\s/g, "").length.toString();

      // Párrafos
      const paragraphs =
        text.trim() === ""
          ? 0
          : text.split(/\n\s*\n/).filter((p) => p.trim() !== "").length;
      paragraphCount.textContent = paragraphs.toString();

      // Palabras únicas
      const uniqueWordsSet = new Set(
        text
          .toLowerCase()
          .replace(/[^\w\s]/g, "")
          .split(/\s+/)
          .filter((word) => word.length > 0)
      );
      uniqueWords.textContent = uniqueWordsSet.size.toString();
    }

    // Actualizar estadísticas en tiempo real
    if (!textInput) return;
    textInput.addEventListener("input", updateStats);

    // Inicializar
    updateStats();
  });
</script>
