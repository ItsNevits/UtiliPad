---
import BoxIcon from "@/assets/icons/box.svg";
import Image from "astro/components/Image.astro";

import type { Language } from "@/types/language.type";
import { getTranslation } from "@/i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="space-y-6 mt-6">
  <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6">
    <div
      id="drop-zone"
      class="border-2 border-dashed border-neutral-300 p-8 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-emerald-400 hover:bg-emerald-50/30 transition-all"
    >
      <Image
        class="text-neutral-600 mb-2 svg-color-neutral-400 opacity-40"
        src={BoxIcon}
        alt={"Box icon"}
        quality={"mid"}
        width={35}
        height={35}
        loading={"lazy"}
      />
      <span class="text-neutral-700 font-medium"
        >{getTranslation(lang, "components.imageConverter.dropFiles")}</span
      >
      <input
        type="file"
        class="hidden"
        id="images-file-input"
        multiple
        accept="image/*"
      />
    </div>
  </div>

  <div
    id="files-uploaded"
    class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6 hidden relative"
  >
    <div
      id="overlay-image-files"
      class="absolute top-0 left-0 w-full h-full bg-gray-900/50 items-center justify-center z-10 hidden"
    >
      <p class="text-lg md:text-xl font-bold leading-tight animate-bounce">
        {
          getTranslation(lang, "components.imageConverter.processInfo") ||
            "Processing..."
        }
      </p>
    </div>
    <div class="flex items-end justify-between mb-4">
      <h2 class="text-xl md:text-2xl font-bold leading-tight">
        {
          getTranslation(lang, "components.imageConverter.uploadedFiles") ||
            "Uploaded Files"
        }
      </h2>
      <span class="text-neutral-600 text-sm">
        {getTranslation(lang, "components.imageConverter.totalFiles")}: <span
          id="total-files-uploaded">0</span
        >
      </span>
    </div>
    <div
      id="content-files-uploaded"
      class="relative flex flex-col gap-4 max-h-100 overflow-y-auto mb-4"
    >
    </div>
    <div class="flex flex-wrap items-center justify-between gap-2">
      <button
        id="compress-and-download"
        class="cursor-pointer mt-5 px-4 py-2 bg-white border border-neutral-300 hover:border-neutral-400 text-neutral-700 rounded transition-colors text-sm active:scale-95"
      >
        {getTranslation(lang, "common.downloadZip") || "Download all as ZIP"}
      </button>
    </div>
  </div>

  <astro-image-converter-translations
    data-translations={JSON.stringify(getTranslation(lang, "common"))}
  ></astro-image-converter-translations>
</div>

<script>
  import { actions } from "astro:actions";

  // Define custom element globally
  let jsonMessages = {} as any;

  class AstroImageConverterTranslations extends HTMLElement {
    connectedCallback() {
      const t = JSON.parse(this.getAttribute("data-translations") || "{}");
      jsonMessages = t || {};
      // Dispatch event to signal translations are ready
      this.dispatchEvent(
        new CustomEvent("translations-ready", {
          bubbles: true,
          detail: t,
        })
      );
    }
  }

  if (!customElements.get("astro-image-converter-translations")) {
    customElements.define(
      "astro-image-converter-translations",
      AstroImageConverterTranslations
    );
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Wait for translations to be loaded
    const astroImageConverterElement = document.querySelector(
      "astro-image-converter-translations"
    );
    if (astroImageConverterElement && Object.keys(jsonMessages).length === 0) {
      astroImageConverterElement.addEventListener(
        "translations-ready",
        initializeComponent,
        { once: true }
      );
      return;
    }

    initializeComponent();
  });

  function initializeComponent() {
    // Cambia todos los selects de formato de imagen al valor global
    (window as any).changeAllImageFormats = function (format: string) {
      if (!format) return;
      currentFiles.forEach((_, idx) => {
        const select = document.getElementById(
          `format-select-${idx}`
        ) as HTMLSelectElement | null;
        if (select) select.value = format;
      });
    };

    const outputFormats = ["jpg", "jpeg", "png", "webp", "tiff", "avif"];

    const dropZone = document.getElementById(
      "drop-zone"
    ) as HTMLDivElement | null;
    const fileInput = document.getElementById(
      "images-file-input"
    ) as HTMLInputElement | null;
    const filesUploaded = document.getElementById(
      "files-uploaded"
    ) as HTMLDivElement | null;
    const contentFilesUploaded = document.getElementById(
      "content-files-uploaded"
    ) as HTMLDivElement | null;
    const compressButton = document.getElementById(
      "compress-and-download"
    ) as HTMLButtonElement | null;
    const overlay = document.getElementById(
      "overlay-image-files"
    ) as HTMLDivElement | null;

    // si algun elemento no existe, salir
    if (!dropZone || !fileInput || !filesUploaded || !contentFilesUploaded)
      return;

    let currentFiles: File[] = [];

    if (dropZone && fileInput) {
      dropZone.addEventListener("click", () => {
        fileInput.click();
      });

      dropZone.addEventListener("dragover", (event) => {
        event.preventDefault();
        dropZone.classList.add("border-blue-500");
      });

      dropZone.addEventListener("dragleave", () => {
        dropZone.classList.remove("border-blue-500");
      });

      dropZone.addEventListener("drop", (event: DragEvent) => {
        event.preventDefault();
        dropZone.classList.remove("border-blue-500");
        if (!event.dataTransfer) return;
        const files = event.dataTransfer.files;
        handleFiles(files);
      });
    }

    if (fileInput) {
      fileInput.addEventListener("change", () => {
        const files = fileInput.files;
        handleFiles(files);
      });
    }

    function handleFiles(files: FileList | null) {
      if (!files || files.length === 0) return;
      const newFiles = Array.from(files);
      currentFiles = [...currentFiles, ...newFiles];
      updateUI();
    }

    function updateUI() {
      if (!filesUploaded || !contentFilesUploaded) return;
      if (currentFiles.length === 0) {
        filesUploaded.classList.add("hidden");
        return;
      }
      filesUploaded.classList.remove("hidden");
      contentFilesUploaded.innerHTML = "";
      currentFiles.forEach((file: File, index: number) => {
        const fileType = file.name.split(".").pop() || "file";

        // Solo permitir tipos de imagen comunes
        if (outputFormats.includes(fileType.toLowerCase()) === false) return;

        const fileName = file.name;
        const fileSize = (file.size / 1024).toFixed(2) + " KB";
        const newElement = generateElement(fileType, fileName, fileSize, index);
        contentFilesUploaded.appendChild(
          document.createRange().createContextualFragment(newElement)
        );
      });
      const totalFilesSpan = document.getElementById(
        "total-files-uploaded"
      ) as HTMLSpanElement | null;
      if (totalFilesSpan) {
        totalFilesSpan.textContent = currentFiles.length.toString();
      }
      updateFileInput();
    }

    function updateFileInput() {
      if (!fileInput) return;
      const dt = new DataTransfer();
      currentFiles.forEach((file) => dt.items.add(file));
      fileInput.files = dt.files;
    }

    function generateElement(
      type: string,
      name: string,
      size: string,
      index: number
    ): string {
      return `
      <div class="bg-white rounded-xl border border-neutral-200 p-4 flex flex-col gap-4 justify-between">
        <div class="flex flex-col md:flex-row md:items-center gap-4 justify-between flex-wrap">
          <div class="flex items-center gap-4 flex-1 min-w-0">
            <div class="w-10 min-w-10 h-10 min-h-10 bg-emerald-100 rounded-lg flex items-center justify-center">
              <span class="text-xs font-semibold text-emerald-700">${type.toUpperCase()}</span>
            </div>
            <div class="min-w-0">
              <p class="font-semibold text-neutral-800 truncate max-w-[180px] md:max-w-[300px] lg:max-w-[400px] xl:max-w-[600px]" title="${name}">${name}</p>
              <p class="text-sm text-neutral-600">${size}</p>
            </div>
          </div>
          <div class="flex items-center gap-2">
            <label for="format-select-${index}" class="text-sm font-medium text-neutral-700">${jsonMessages.format}:</label>
            <select class="cursor-pointer px-3 py-2 bg-white border border-neutral-300 rounded-lg text-neutral-700 text-sm font-medium focus:outline-none focus:ring-2 focus:ring-emerald-500/50 focus:border-emerald-500 transition-all shadow-sm w-full md:w-auto" id="format-select-${index}">
              <option value="" disabled selected>${jsonMessages.select}</option>
              ${outputFormats
                .filter((f) => f !== "jpg")
                .map((f) => `<option value="${f}">${f.toUpperCase()}</option>`)
                .join("")}
            </select>
          </div>
        </div>
        <div class="flex items-center gap-3 flex-wrap w-full md:w-auto">
          <button class="cursor-pointer px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-white rounded-lg transition-colors text-sm font-semibold shadow-sm w-full md:w-auto" onclick="window.downloadImage(${index})">
            ${jsonMessages.download}
          </button>
          <button title="${jsonMessages.delete}" class="cursor-pointer px-4 py-2 bg-white border border-red-300 hover:bg-red-50 hover:border-red-400 text-red-600 rounded-lg transition-all text-sm font-medium shadow-sm w-full md:w-auto" onclick="window.removeFileUploaded(${index})">
            ${jsonMessages.delete}
          </button>
        </div>
      </div>
    `;
    }

    function removeFileUploaded(index: number) {
      currentFiles.splice(index, 1);
      updateUI();
    }

    (window as any).removeFileUploaded = removeFileUploaded;

    // Placeholder for downloadImage (to be implemented with API/sharp)
    (window as any).downloadImage = async function (index: number) {
      const file = currentFiles[index];
      if (!file) return;

      const formatSelect = document.getElementById(
        `format-select-${index}`
      ) as HTMLSelectElement | null;

      const format = formatSelect?.value || "jpeg";

      if (!format) {
        alert(jsonMessages.selectFormat || "Selecciona un formato");
        return;
      }

      try {
        if (overlay) {
          overlay.classList.remove("hidden");
          overlay.classList.add("flex");
        }

        const formData = new FormData();
        formData.append("file", file);
        formData.append("format", format);

        const { data, error } = await actions.convertImages(formData);

        if (error) {
          throw new Error(error.message);
        }

        if (!data) {
          throw new Error("No result received");
        }

        // Convertir array de números de vuelta a Uint8Array
        const buffer = new Uint8Array(data.buffer);
        const blob = new Blob([buffer], { type: `image/${format}` });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");

        a.href = url;
        a.download = data.filename || `${file.name.split(".")[0]}.${format}`;
        document.body.appendChild(a);
        a.click();

        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } catch (err: any) {
        alert(
          jsonMessages.noImplemented ||
            "Error al convertir la imagen: " + err.message
        );
      } finally {
        // Ocultar overlay o manejar estado si es necesario
        if (overlay) {
          overlay.classList.add("hidden");
          overlay.classList.remove("flex");

          actions.createUpdateProcessCount({ process_name: "image-convert" });
        }
      }
    };

    if (compressButton) {
      compressButton.addEventListener("click", compressAndDownload);
    }

    async function compressAndDownload() {
      if (currentFiles.length === 0) return;

      if (overlay) {
        overlay.classList.remove("hidden");
        overlay.classList.add("flex");
      }

      try {
        // Obtener formatos seleccionados para cada archivo
        let filesWhitoutFormat = [] as string[];

        const formats = currentFiles.map((_, idx) => {
          const select = document.getElementById(
            `format-select-${idx}`
          ) as HTMLSelectElement | null;

          if (select && !select.value) {
            filesWhitoutFormat[idx] = currentFiles[idx].name;
          }

          return select && select.value ? select.value : "";
        });

        if (filesWhitoutFormat.length > 0) {
          alert(
            (jsonMessages.selectFormatForAll ||
              "Selecciona un formato para los siguientes archivos:") +
              "\n- " +
              filesWhitoutFormat.join("\n- ")
          );
          return;
        }

        const formData = new FormData();
        currentFiles.forEach((file, idx) => {
          formData.append("files[]", file, file.name);
          formData.append("formats[]", formats[idx]);
        });

        formData.append("asZip", "true");

        const { data, error } = await actions.convertImages(formData);

        if (error) {
          throw new Error(error.message);
        }

        if (!data) {
          throw new Error("No result received");
        }

        // Convertir array de números de vuelta a Uint8Array
        const zipBuffer = new Uint8Array(data.buffer);
        const blob = new Blob([zipBuffer], { type: "application/zip" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");

        a.href = url;
        a.download = data.filename || "images.zip";
        document.body.appendChild(a);
        a.click();

        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } catch (err: any) {
        alert(
          jsonMessages.noImplemented ||
            "Error al comprimir y descargar: " + err.message
        );
      } finally {
        // Ocultar overlay o manejar estado si es necesario
        if (overlay) {
          overlay.classList.add("hidden");
          overlay.classList.remove("flex");

          actions.createUpdateProcessCount({
            process_name: "image-converter",
          });
        }
      }
    }
  }
</script>
