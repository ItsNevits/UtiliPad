---
import ExpandIcon from "@/assets/icons/expand.svg";
import { Picture } from "astro:assets";
import "@/styles/tools/JsonFormatter.css";

import type { Language } from "@/types/language.type";
import { getTranslation } from "@/i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="bg-neutral-800/50 rounded-xl p-6 select-none">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Panel de entrada -->
    <div class="space-y-4">
      <div class="flex items-center justify-between">
        <label class="block text-sm font-medium text-neutral-300">
          {getTranslation(lang, "components.jsonFormatter.inputTitle")}
        </label>
        <div class="flex gap-2">
          <button
            id="paste-btn"
            title={getTranslation(lang, "components.jsonFormatter.paste")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors active:scale-95"
          >
            {getTranslation(lang, "components.jsonFormatter.paste")}
          </button>
          <button
            id="clear-btn"
            title={getTranslation(lang, "components.jsonFormatter.clear")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors active:scale-95"
          >
            {getTranslation(lang, "components.jsonFormatter.clear")}
          </button>
        </div>
      </div>

      <textarea
        id="json-input"
        placeholder='{"nombre": "Juan", "edad": 30, "activo": true}'
        class="w-full h-96 p-4 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm font-mono resize-none focus:outline-none focus:ring-2 focus:ring-emerald-500/50"
      ></textarea>

      <!-- Controles de formateo -->
      <div class="flex flex-wrap gap-4">
        <label class="flex items-center gap-2 text-sm text-neutral-300">
          <input
            type="number"
            id="indent-size"
            min="1"
            max="8"
            value="2"
            class="w-16 px-2 py-1 bg-neutral-700 border border-neutral-600 rounded text-xs"
          />
          {getTranslation(lang, "components.jsonFormatter.indentSpaces")}
        </label>

        <div class="flex flex-wrap gap-2">
          <button
            id="format-btn"
            title={getTranslation(lang, "components.jsonFormatter.format")}
            class="cursor-pointer px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors text-sm active:scale-95"
          >
            {getTranslation(lang, "components.jsonFormatter.format")}
          </button>
          <button
            id="minify-btn"
            title={getTranslation(lang, "components.jsonFormatter.minify")}
            class="cursor-pointer px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors text-sm active:scale-95"
          >
            {getTranslation(lang, "components.jsonFormatter.minify")}
          </button>
        </div>
      </div>

      <!-- Estado de validación -->
      <div id="validation-status" class="text-sm"></div>
    </div>

    <!-- Panel de salida -->
    <div class="space-y-4">
      <div class="flex items-center justify-between">
        <label class="block text-sm font-medium text-neutral-300">
          {getTranslation(lang, "components.jsonFormatter.outputTitle")}
        </label>
        <div class="flex gap-2">
          <button
            id="copy-btn"
            title={getTranslation(lang, "components.jsonFormatter.copy")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors active:scale-95"
          >
            {getTranslation(lang, "components.jsonFormatter.copy")}
          </button>
          <button
            id="download-btn"
            title={getTranslation(lang, "common.download")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors active:scale-95"
          >
            {getTranslation(lang, "common.download")}
          </button>
        </div>
      </div>

      <!-- Salida con json-formatter-js -->
      <div class="relative">
        <div
          id="json-output"
          class="w-full h-96 p-4 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm font-mono overflow-auto"
        >
        </div>
        <textarea
          id="json-output-text"
          class="w-full h-96 p-4 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm font-mono resize-none focus:outline-none focus:ring-2 focus:ring-emerald-500/50 hidden"
          readonly></textarea>

        <button
          id="expand-btn"
          title="Expandir JSON"
          class="cursor-pointer absolute top-2 right-2 p-2 bg-neutral-800/80 backdrop-blur-sm rounded-lg hover:bg-neutral-700/80 transition-all duration-200 shadow-lg border border-neutral-700/50 hover:border-neutral-600/70 active:scale-95"
        >
          <Picture
            src={ExpandIcon}
            alt="Expandir"
            class="w-4 h-4 filter brightness-0 invert opacity-70 hover:opacity-100 transition-opacity duration-200"
          />
        </button>
      </div>

      <!-- Información del JSON -->
      <div class="grid grid-cols-2 gap-4 text-sm">
        <div class="bg-neutral-900/60 rounded-lg p-3">
          <div class="text-neutral-400">
            {getTranslation(lang, "components.jsonFormatter.originalSize")}
          </div>
          <div id="original-size" class="font-mono text-neutral-300">
            0 bytes
          </div>
        </div>
        <div class="bg-neutral-900/60 rounded-lg p-3">
          <div class="text-neutral-400">
            {getTranslation(lang, "components.jsonFormatter.formattedSize")}
          </div>
          <div id="formatted-size" class="font-mono text-neutral-300">
            0 bytes
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<astro-json-formatter-translations
  data-translations={JSON.stringify(
    getTranslation(lang, "components.jsonFormatter")
  )}></astro-json-formatter-translations>

<script>
  import JSONFormatter from "json-formatter-js";
  import { openModal } from "@/stores/modal";
  import { actions } from "astro:actions";

  // Import business logic
  import {
    parseJson,
    formatJson,
    minifyJson,
    calculateSizes,
    formatBytes,
    downloadJson,
  } from "@/lib/text";

  // Import clipboard utilities
  import { copyToClipboard, readFromClipboard } from "@/hooks/index";

  // Define custom element globally
  let jsonMessages = {} as any;
  let currentJsonData: any = null;
  let currentFormatter: any = null;

  class AstroJsonFormatterTranslations extends HTMLElement {
    connectedCallback() {
      jsonMessages = JSON.parse(this.getAttribute("data-translations") || "{}");
      console.log("Translations loaded:", jsonMessages);
      // Dispatch event to signal translations are ready
      this.dispatchEvent(
        new CustomEvent("translations-ready", {
          bubbles: true,
          detail: jsonMessages,
        })
      );
    }
  }

  if (!customElements.get("astro-json-formatter-translations")) {
    customElements.define(
      "astro-json-formatter-translations",
      AstroJsonFormatterTranslations
    );
  }

  document.addEventListener("astro:page-load", () => {
    // Wait for translations to be loaded
    const astroJsonFormatterElement = document.querySelector(
      "astro-json-formatter-translations"
    );
    if (astroJsonFormatterElement && Object.keys(jsonMessages).length === 0) {
      astroJsonFormatterElement.addEventListener(
        "translations-ready",
        initializeComponent,
        { once: true }
      );
      return;
    }

    initializeComponent();
  });

  function initializeComponent() {
    // Get DOM elements
    const elements = {
      jsonInput: document.getElementById("json-input") as HTMLTextAreaElement,
      jsonOutput: document.getElementById("json-output") as HTMLElement,
      jsonOutputText: document.getElementById(
        "json-output-text"
      ) as HTMLTextAreaElement,
      validationStatus: document.getElementById(
        "validation-status"
      ) as HTMLElement,
      originalSize: document.getElementById("original-size") as HTMLElement,
      formattedSize: document.getElementById("formatted-size") as HTMLElement,
      indentSize: document.getElementById("indent-size") as HTMLInputElement,
      formatBtn: document.getElementById("format-btn") as HTMLButtonElement,
      minifyBtn: document.getElementById("minify-btn") as HTMLButtonElement,
      pasteBtn: document.getElementById("paste-btn") as HTMLButtonElement,
      clearBtn: document.getElementById("clear-btn") as HTMLButtonElement,
      copyBtn: document.getElementById("copy-btn") as HTMLButtonElement,
      downloadBtn: document.getElementById("download-btn") as HTMLButtonElement,
      expandBtn: document.getElementById("expand-btn") as HTMLButtonElement,
    };

    if (Object.values(elements).some((el) => !el)) return;

    // Clean up function for the formatter
    const cleanupFormatter = () => {
      if (elements.jsonOutput) {
        while (elements.jsonOutput.firstChild) {
          elements.jsonOutput.removeChild(elements.jsonOutput.firstChild);
        }
        elements.jsonOutput.innerHTML = "";
      }
      currentFormatter = null;
    };

    // Utility functions
    const updateSizes = (original: string, formatted: string) => {
      const stats = calculateSizes(original, formatted);
      elements.originalSize.textContent = formatBytes(stats.originalSize);
      elements.formattedSize.textContent = formatBytes(stats.formattedSize);
    };

    const showValidationStatus = (isValid: boolean, message: string = "") => {
      const status = isValid
        ? `<span class="text-emerald-400">✓ ${jsonMessages.validJson}</span>`
        : `<span class="text-red-400">✗ ${jsonMessages.invalidJson}: ${message}</span>`;
      elements.validationStatus.innerHTML = status;
    };

    const clearOutput = () => {
      cleanupFormatter();
      elements.jsonOutputText.value = "";
      elements.validationStatus.innerHTML = "";
      updateSizes("", "");
      currentJsonData = null;
    };

    // Main functions
    const formatJSON = () => {
      const inputText = elements.jsonInput.value.trim();

      const result = parseJson(inputText);

      if (!result.isValid) {
        clearOutput();
        showValidationStatus(false, result.error || jsonMessages.emptyInput);
        return;
      }

      const indent = parseInt(elements.indentSize.value) || 2;
      currentJsonData = result.data;

      cleanupFormatter();

      // Show formatted view
      elements.jsonOutput.classList.remove("hidden");
      elements.jsonOutputText.classList.add("hidden");

      // Create new formatter instance
      currentFormatter = new JSONFormatter(result.data, 1, {
        hoverPreviewEnabled: false,
        hoverPreviewArrayCount: 100,
        hoverPreviewFieldCount: 5,
        theme: "dark",
      });

      elements.jsonOutput.appendChild(currentFormatter.render());

      const formattedText = formatJson(result.data, indent);
      elements.jsonOutputText.value = formattedText;

      showValidationStatus(true);
      updateSizes(inputText, formattedText);

      actions.createUpdateProcessCount({ process_name: "json-formatter" });
    };

    const minifyJSON = () => {
      const inputText = elements.jsonInput.value.trim();
      const result = parseJson(inputText);

      if (!result.isValid) {
        showValidationStatus(false, result.error || "");
        return;
      }

      const minified = minifyJson(result.data);

      elements.jsonOutput.classList.add("hidden");
      elements.jsonOutputText.classList.remove("hidden");
      elements.jsonOutputText.value = minified;

      showValidationStatus(true);
      updateSizes(inputText, minified);
      actions.createUpdateProcessCount({ process_name: "json-formatter" });
    };

    const openJsonModal = () => {
      if (!currentJsonData) return;

      const modalFormatter = new JSONFormatter(currentJsonData, 3, {
        hoverPreviewEnabled: true,
        hoverPreviewArrayCount: 50,
        hoverPreviewFieldCount: 8,
        theme: "dark",
        animateOpen: true,
        animateClose: true,
      });

      const container = document.createElement("div");
      container.className =
        "json-formatter-container w-full max-w-full overflow-hidden";
      container.appendChild(modalFormatter.render());

      openModal({
        title: jsonMessages.modalTitle,
        description: jsonMessages.modalDescription,
        content: container,
        onCopy: async () => {
          await copyToClipboard(formatJson(currentJsonData, 2));
        },
      });
    };

    // Event listeners
    elements.formatBtn.addEventListener("click", formatJSON);
    elements.minifyBtn.addEventListener("click", minifyJSON);
    elements.expandBtn.addEventListener("click", openJsonModal);

    elements.pasteBtn.addEventListener("click", async () => {
      const { text } = await readFromClipboard();
      if (text) {
        elements.jsonInput.value = text;
        formatJSON();
      }
    });

    elements.clearBtn.addEventListener("click", () => {
      elements.jsonInput.value = "";
      clearOutput();
    });

    elements.copyBtn.addEventListener("click", async () => {
      if (elements.jsonOutputText.value) {
        const result = await copyToClipboard(elements.jsonOutputText.value);
        if (result.success) {
          elements.copyBtn.textContent = `${jsonMessages.copy} ✓`;
          setTimeout(() => {
            elements.copyBtn.textContent = jsonMessages.copy;
          }, 2000);
        }
      }
    });

    elements.downloadBtn.addEventListener("click", () => {
      if (elements.jsonOutputText.value) {
        downloadJson(elements.jsonOutputText.value);
      }
    });

    // Auto-format with debounce
    let timeoutId: ReturnType<typeof setTimeout>;
    elements.jsonInput.addEventListener("input", () => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(formatJSON, 500);
    });

    // Format on load if there's initial content
    if (elements.jsonInput.value.trim()) {
      formatJSON();
    }

    // Cleanup on page leave (important for View Transitions)
    document.addEventListener(
      "astro:before-preparation",
      () => {
        cleanupFormatter();
      },
      { once: true }
    );
  }
</script>

<style>
  @import "../../../styles/tools/JsonFormatter.css";
</style>
