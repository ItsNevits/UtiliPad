---
import type { Language } from "@/types/language.type";
import { getTranslation } from "@/i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="space-y-6 mt-6">
  <!-- Password Output -->
  <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6">
    <label class="block text-sm font-semibold text-neutral-800 mb-3" for="generatedPassword">
      {getTranslation(lang, "components.passwordGenerator.generatedPasswordLabel")}
    </label>
    <div class="relative">
      <input
        type="text"
        id="generatedPassword"
        readonly
        value="VFSjZoNXmj3pQ4"
        class="w-full pr-24 pl-4 py-3 rounded-lg border border-neutral-300 text-base font-mono bg-white text-neutral-700 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 shadow-sm"
      />
      <div class="absolute right-2 top-1/2 -translate-y-1/2 flex gap-1">
        <button
          id="refreshBtn"
          class="cursor-pointer p-2 rounded-lg hover:bg-emerald-100 text-neutral-600 hover:text-emerald-600 transition-colors duration-200"
          title="Generar nueva contraseña"
        >
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path>
            <path d="M21 3v5h-5"></path>
            <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path>
            <path d="M3 21v-5h5"></path>
          </svg>
        </button>
        <button
          id="copyBtn"
          class="cursor-pointer p-2 rounded-lg hover:bg-emerald-100 text-neutral-600 hover:text-emerald-600 transition-colors duration-200"
          title="Copiar contraseña"
        >
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Options -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Left Column -->
    <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6 space-y-5">
      <div>
        <label for="length" class="block text-sm font-semibold text-neutral-800 mb-3">
          {getTranslation(lang, "common.lengthLabel")}
        </label>
        <input
          type="number"
          id="length"
          value="14"
          min="5"
          max="128"
          class="w-full px-4 py-2.5 bg-white border border-neutral-300 rounded-lg text-sm text-neutral-700 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 shadow-sm"
        />
        <p class="text-xs text-neutral-500 mt-2">
          {getTranslation(lang, "components.passwordGenerator.valuesBetween")}
        </p>
      </div>

      <div>
        <h4 class="text-sm font-semibold text-neutral-800 mb-3">
          {getTranslation(lang, "common.include")}
        </h4>
        <div class="grid grid-cols-2 gap-2">
          <label class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-50 rounded-lg px-3 py-2.5 border border-neutral-200 hover:border-emerald-500 transition-colors">
            <input
              type="checkbox"
              id="includeAZ"
              checked
              class="accent-emerald-500 w-4 h-4 rounded border-neutral-300 focus:ring-2 focus:ring-emerald-500"
            />
            <span class="font-medium text-neutral-700">A-Z</span>
          </label>
          <label class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-50 rounded-lg px-3 py-2.5 border border-neutral-200 hover:border-emerald-500 transition-colors">
            <input
              type="checkbox"
              id="includear"
              checked
              class="accent-emerald-500 w-4 h-4 rounded border-neutral-300 focus:ring-2 focus:ring-emerald-500"
            />
            <span class="font-medium text-neutral-700">a-z</span>
          </label>
          <label class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-50 rounded-lg px-3 py-2.5 border border-neutral-200 hover:border-emerald-500 transition-colors">
            <input
              type="checkbox"
              id="include09"
              checked
              class="accent-emerald-500 w-4 h-4 rounded border-neutral-300 focus:ring-2 focus:ring-emerald-500"
            />
            <span class="font-medium text-neutral-700">0-9</span>
          </label>
          <label class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-50 rounded-lg px-3 py-2.5 border border-neutral-200 hover:border-emerald-500 transition-colors">
            <input
              type="checkbox"
              id="includeSymbols"
              class="accent-emerald-500 w-4 h-4 rounded border-neutral-300 focus:ring-2 focus:ring-emerald-500"
            />
            <span class="font-medium text-neutral-700">!@#$%*&*</span>
          </label>
        </div>
      </div>
    </div>

    <!-- Right Column -->
    <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-6 space-y-5">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="minNumbers" class="block text-sm font-semibold text-neutral-800 mb-3">
            {getTranslation(lang, "common.minimumNumbers")}
          </label>
          <input
            type="number"
            id="minNumbers"
            value="1"
            min="0"
            class="w-full px-4 py-2.5 bg-white border border-neutral-300 rounded-lg text-sm text-neutral-700 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 shadow-sm"
          />
        </div>
        <div>
          <label for="minSpecial" class="block text-sm font-semibold text-neutral-800 mb-3">
            {getTranslation(lang, "common.minimunSpecialChars")}
          </label>
          <input
            type="number"
            id="minSpecial"
            value="0"
            min="0"
            class="w-full px-4 py-2.5 bg-white border border-neutral-300 rounded-lg text-sm text-neutral-700 focus:outline-none focus:ring-2 focus:ring-emerald-500/50 shadow-sm"
          />
        </div>
      </div>

      <div class="bg-emerald-50 border border-emerald-200 rounded-lg p-4">
        <p class="text-xs text-emerald-700 leading-relaxed">
          {getTranslation(lang, "components.passwordGenerator.tip")}
        </p>
      </div>
    </div>
  </div>
</div>

<script>
  import { PasswordGenerator } from "@/lib/text";
  import type { PasswordOptions } from "@/types/password.type";
  import { copyToClipboard } from "@/hooks/index";
  import { actions } from "astro:actions";

  document.addEventListener("DOMContentLoaded", () => {
    const generator = new PasswordGenerator();

    const passwordInput = document.getElementById("generatedPassword") as HTMLInputElement;
    const refreshBtn = document.getElementById("refreshBtn") as HTMLButtonElement;
    const copyBtn = document.getElementById("copyBtn") as HTMLButtonElement;

    if (!passwordInput || !refreshBtn || !copyBtn) return;

    function getCurrentOptions(): PasswordOptions {
      return {
        length: parseInt((document.getElementById("length") as HTMLInputElement).value),
        includeUppercase: (document.getElementById("includeAZ") as HTMLInputElement).checked,
        includeLowercase: (document.getElementById("includear") as HTMLInputElement).checked,
        includeNumbers: (document.getElementById("include09") as HTMLInputElement).checked,
        includeSymbols: (document.getElementById("includeSymbols") as HTMLInputElement).checked,
        minNumbers: parseInt((document.getElementById("minNumbers") as HTMLInputElement).value),
        minSpecial: parseInt((document.getElementById("minSpecial") as HTMLInputElement).value),
      };
    }

    function generateNewPassword(): void {
      try {
        const options = getCurrentOptions();
        const newPassword = generator.generatePassword(options);
        passwordInput.value = newPassword;
        actions.createUpdateProcessCount({ process_name: "password-generator" });
      } catch (error) {
        alert(error instanceof Error ? error.message : "Error generando contraseña");
      }
    }

    async function handleCopy(): Promise<void> {
      const result = await copyToClipboard(passwordInput.value);
      if (result.success) {
        const originalHTML = copyBtn.innerHTML;
        copyBtn.innerHTML = `<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M20 6L9 17l-5-5"></path></svg>`;
        setTimeout(() => {
          copyBtn.innerHTML = originalHTML;
        }, 2000);
      }
    }

    refreshBtn.addEventListener("click", generateNewPassword);
    copyBtn.addEventListener("click", handleCopy);

    document.querySelectorAll('input[type="checkbox"], input[type="number"]').forEach((input) => {
      input.addEventListener("change", generateNewPassword);
    });

    const lengthInput = document.getElementById("length") as HTMLInputElement;
    lengthInput.addEventListener("blur", () => {
      let value = parseInt(lengthInput.value);
      if (isNaN(value) || value < 5) value = 5;
      if (value > 128) value = 128;
      lengthInput.value = value.toString();
      generateNewPassword();
    });

    generateNewPassword();
  });
</script>
