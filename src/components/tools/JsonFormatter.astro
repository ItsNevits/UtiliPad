---
import ExpandIcon from "@assets/icons/expand.svg";
import { Picture } from "astro:assets";

import type { Language } from "@@types/language.type";
import { getTranslation } from "@i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="bg-neutral-800/50 rounded-xl p-6 select-none">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Panel de entrada -->
    <div class="space-y-4">
      <div class="flex items-center justify-between">
        <label class="block text-sm font-medium text-neutral-300">
          {getTranslation(lang, "components.jsonFormatter.inputTitle")}
        </label>
        <div class="flex gap-2">
          <button
            id="paste-btn"
            title={getTranslation(lang, "components.jsonFormatter.paste")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors"
          >
            {getTranslation(lang, "components.jsonFormatter.paste")}
          </button>
          <button
            id="clear-btn"
            title={getTranslation(lang, "components.jsonFormatter.clear")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors"
          >
            {getTranslation(lang, "components.jsonFormatter.clear")}
          </button>
        </div>
      </div>

      <textarea
        id="json-input"
        placeholder='{"nombre": "Juan", "edad": 30, "activo": true}'
        class="w-full h-96 p-4 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm font-mono resize-none focus:outline-none focus:ring-2 focus:ring-emerald-500/50"
      ></textarea>

      <!-- Controles de formateo -->
      <div class="flex flex-wrap gap-4">
        <label class="flex items-center gap-2 text-sm text-neutral-300">
          <input
            type="number"
            id="indent-size"
            min="1"
            max="8"
            value="2"
            class="w-16 px-2 py-1 bg-neutral-700 border border-neutral-600 rounded text-xs"
          />
          {getTranslation(lang, "components.jsonFormatter.indentSpaces")}
        </label>

        <div class="flex flex-wrap gap-2">
          <button
            id="format-btn"
            title={getTranslation(lang, "components.jsonFormatter.format")}
            class="cursor-pointer px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors text-sm"
          >
            {getTranslation(lang, "components.jsonFormatter.format")}
          </button>
          <button
            id="minify-btn"
            title={getTranslation(lang, "components.jsonFormatter.minify")}
            class="cursor-pointer px-4 py-2 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors text-sm"
          >
            {getTranslation(lang, "components.jsonFormatter.minify")}
          </button>
        </div>
      </div>

      <!-- Estado de validación -->
      <div id="validation-status" class="text-sm"></div>
    </div>

    <!-- Panel de salida -->
    <div class="space-y-4">
      <div class="flex items-center justify-between">
        <label class="block text-sm font-medium text-neutral-300">
          {getTranslation(lang, "components.jsonFormatter.outputTitle")}
        </label>
        <div class="flex gap-2">
          <button
            id="copy-btn"
            title={getTranslation(lang, "components.jsonFormatter.copy")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors"
          >
            {getTranslation(lang, "components.jsonFormatter.copy")}
          </button>
          <button
            id="download-btn"
            title={getTranslation(lang, "common.download")}
            class="cursor-pointer text-xs px-3 py-1 bg-neutral-700 hover:bg-neutral-600 text-neutral-200 rounded transition-colors"
          >
            {getTranslation(lang, "common.download")}
          </button>
        </div>
      </div>

      <!-- Salida con json-formatter-js -->
      <div class="relative">
        <div
          id="json-output"
          class="w-full h-96 p-4 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm font-mono overflow-auto"
        >
        </div>
        <textarea
          id="json-output-text"
          class="w-full h-96 p-4 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm font-mono resize-none focus:outline-none focus:ring-2 focus:ring-emerald-500/50 hidden"
          readonly></textarea>

        <button
          id="expand-btn"
          title="Expandir JSON"
          class="cursor-pointer absolute top-2 right-2 p-2 bg-neutral-800/80 backdrop-blur-sm rounded-lg hover:bg-neutral-700/80 transition-all duration-200 shadow-lg border border-neutral-700/50 hover:border-neutral-600/70"
        >
          <Picture
            src={ExpandIcon}
            alt="Expandir"
            class="w-4 h-4 filter brightness-0 invert opacity-70 hover:opacity-100 transition-opacity duration-200"
          />
        </button>
      </div>

      <!-- Información del JSON -->
      <div class="grid grid-cols-2 gap-4 text-sm">
        <div class="bg-neutral-900/60 rounded-lg p-3">
          <div class="text-neutral-400">
            {getTranslation(lang, "components.jsonFormatter.originalSize")}
          </div>
          <div id="original-size" class="font-mono text-neutral-300">
            0 bytes
          </div>
        </div>
        <div class="bg-neutral-900/60 rounded-lg p-3">
          <div class="text-neutral-400">
            {getTranslation(lang, "components.jsonFormatter.formattedSize")}
          </div>
          <div id="formatted-size" class="font-mono text-neutral-300">
            0 bytes
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<astro-greet
  data-translations={JSON.stringify(
    getTranslation(lang, "components.jsonFormatter")
  )}></astro-greet>

<script>
  import JSONFormatter from "json-formatter-js";
  import { openModal } from "../../stores/modal";
  import { fetchIncrementProcessCountByToolId } from "@utils/tools";

  let jsonMessages = {} as any;

  class AstroGreet extends HTMLElement {
    connectedCallback() {
      const t = JSON.parse(this.getAttribute("data-translations") || "{}");
      jsonMessages = t;
    }
  }

  customElements.define("astro-greet", AstroGreet);

  const jsonInput = document.getElementById(
    "json-input"
  ) as HTMLTextAreaElement;
  const jsonOutput = document.getElementById("json-output") as HTMLElement;
  const jsonOutputText = document.getElementById(
    "json-output-text"
  ) as HTMLTextAreaElement;
  const validationStatus = document.getElementById(
    "validation-status"
  ) as HTMLElement;
  const originalSize = document.getElementById("original-size") as HTMLElement;
  const formattedSize = document.getElementById(
    "formatted-size"
  ) as HTMLElement;
  const indentSize = document.getElementById("indent-size") as HTMLInputElement;

  // Botones
  const formatBtn = document.getElementById("format-btn") as HTMLButtonElement;
  const minifyBtn = document.getElementById("minify-btn") as HTMLButtonElement;
  const pasteBtn = document.getElementById("paste-btn") as HTMLButtonElement;
  const clearBtn = document.getElementById("clear-btn") as HTMLButtonElement;
  const copyBtn = document.getElementById("copy-btn") as HTMLButtonElement;
  const downloadBtn = document.getElementById(
    "download-btn"
  ) as HTMLButtonElement;

  // Elementos del componente
  const expandBtn = document.getElementById("expand-btn") as HTMLButtonElement;

  let currentJsonData: any = null;

  function updateSizes(original: string, formatted: string) {
    originalSize.textContent = `${new Blob([original]).size} bytes`;
    formattedSize.textContent = `${new Blob([formatted]).size} bytes`;
  }

  function showValidationStatus(isValid: boolean, message: string = "") {
    if (isValid) {
      validationStatus.innerHTML = `<span class="text-emerald-400">✓ ${jsonMessages.validJson}</span>`;
    } else {
      validationStatus.innerHTML = `<span class="text-red-400">✗ ${jsonMessages.invalidJson}: ${message}</span>`;
    }
  }

  // Función para abrir el modal con el JSON expandido
  function openJsonModal() {
    if (!currentJsonData) return;

    // Crear formateador para el modal con más niveles expandidos
    const modalFormatter = new JSONFormatter(currentJsonData, 3, {
      hoverPreviewEnabled: true,
      hoverPreviewArrayCount: 50,
      hoverPreviewFieldCount: 8,
      theme: "dark",
      animateOpen: true,
      animateClose: true,
    });

    // Crear elemento contenedor para el JSON
    const container = document.createElement("div");
    container.className =
      "json-formatter-container w-full max-w-full overflow-hidden";
    const renderedJson = modalFormatter.render();
    container.appendChild(renderedJson);

    // Información adicional
    const formattedText = JSON.stringify(currentJsonData, null, 2);

    // Abrir modal usando el store
    openModal({
      title: jsonMessages.modalTitle,
      description: jsonMessages.modalDescription,
      content: container,
      onCopy: async () => {
        try {
          await navigator.clipboard.writeText(formattedText);
        } catch (error) {
          console.error("Error al copiar:", error);
        }
      },
    });
  }

  function formatJSON() {
    const inputText = jsonInput.value.trim();

    if (!inputText) {
      jsonOutput.innerHTML = "";
      jsonOutputText.value = "";
      showValidationStatus(false, jsonMessages.emptyInput);
      updateSizes("", "");
      currentJsonData = null;
      return;
    }

    try {
      const parsedJSON = JSON.parse(inputText);
      const indent = parseInt(indentSize.value) || 2;

      // Guardar datos para el modal
      currentJsonData = parsedJSON;

      // Limpiar el contenedor
      jsonOutput.innerHTML = "";
      jsonOutput.classList.remove("hidden");
      jsonOutputText.classList.add("hidden");

      // Crear el formateador con json-formatter-js
      const formatter = new JSONFormatter(parsedJSON, 1, {
        hoverPreviewEnabled: false,
        hoverPreviewArrayCount: 100,
        hoverPreviewFieldCount: 5,
        theme: "dark",
      });

      jsonOutput.appendChild(formatter.render());

      // También generar versión de texto para copiar
      const formattedText = JSON.stringify(parsedJSON, null, indent);
      jsonOutputText.value = formattedText;

      showValidationStatus(true);
      updateSizes(inputText, formattedText);
    } catch (error) {
      showValidationStatus(false, (error as Error).message);
      jsonOutput.innerHTML = `<div class="text-red-400 p-4">${jsonMessages.errorParsing}</div>`;
      jsonOutputText.value = "";
      updateSizes(inputText, "");
      currentJsonData = null;
    } finally {
      // Incrementar el contador de uso del servicio
      fetchIncrementProcessCountByToolId("json-formatter");
    }
  }

  function minifyJSON() {
    const inputText = jsonInput.value.trim();

    if (!inputText) return;

    try {
      const parsedJSON = JSON.parse(inputText);
      const minified = JSON.stringify(parsedJSON);

      // Mostrar en modo texto para minificado
      jsonOutput.classList.add("hidden");
      jsonOutputText.classList.remove("hidden");
      jsonOutputText.value = minified;

      showValidationStatus(true);
      updateSizes(inputText, minified);
    } catch (error) {
      showValidationStatus(false, (error as Error).message);
    } finally {
      // Incrementar el contador de uso del servicio
      fetchIncrementProcessCountByToolId("json-formatter");
    }
  }

  // Event listeners
  formatBtn.addEventListener("click", formatJSON);
  minifyBtn.addEventListener("click", minifyJSON);

  pasteBtn.addEventListener("click", async () => {
    try {
      const text = await navigator.clipboard.readText();
      jsonInput.value = text;
      formatJSON();
    } catch (error) {
      console.error("Error al pegar:", error);
    }
  });

  clearBtn.addEventListener("click", () => {
    jsonInput.value = "";
    jsonOutput.innerHTML = "";
    jsonOutputText.value = "";
    validationStatus.innerHTML = "";
    updateSizes("", "");
  });

  copyBtn.addEventListener("click", async () => {
    const textToCopy = jsonOutputText.value;
    if (textToCopy) {
      try {
        await navigator.clipboard.writeText(textToCopy);
        copyBtn.textContent = `${jsonMessages.copy} ✓`;
        setTimeout(() => {
          copyBtn.textContent = jsonMessages.copy;
        }, 2000);
      } catch (error) {
        console.error("Error al copiar:", error);
      }
    }
  });

  downloadBtn.addEventListener("click", () => {
    const content = jsonOutputText.value;
    if (content) {
      const blob = new Blob([content], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "formatted.json";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  });

  // Event listeners del modal
  expandBtn.addEventListener("click", openJsonModal);

  // Formatear automáticamente al escribir (con debounce)
  let timeoutId: ReturnType<typeof setTimeout>;
  jsonInput.addEventListener("input", () => {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(formatJSON, 500);
  });

  // Formatear al cargar si hay contenido inicial
  if (jsonInput.value.trim()) {
    formatJSON();
  }
</script>
