---
import type { Language } from "@@types/language.type";
import { getTranslation } from "@i18n/index";

const lang = Astro.params.lang as Language;
---

<div class="bg-neutral-800/50 rounded-xl p-6 select-none">
  <div class="space-y-4">
    <!-- Password Output -->
    <div class="bg-neutral-900/60 rounded-lg flex items-center gap-3 relative">
      <div class="relative w-full">
        <label
          class="block text-sm font-medium text-neutral-300 mb-2"
          for="generatedPassword"
        >
          {
            getTranslation(
              lang,
              "components.passwordGenerator.generatedPasswordLabel"
            )
          }
        </label>
        <input
          type="text"
          id="generatedPassword"
          readonly
          value="VFSjZoNXmj3pQ4"
          class="w-full pr-24 pl-3 py-3 rounded-lg border border-neutral-700 text-base font-mono bg-neutral-800/80 focus:outline-none focus:ring-2"
        />
        <div class="absolute right-2 top-1/2 -translate-y-1/10 flex gap-1">
          <button
            id="refreshBtn"
            class="cursor-pointer p-2 rounded hover:bg-emerald-700/30 transition-colors duration-200"
            title="Generar nueva contraseña"
          >
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"
              ></path>
              <path d="M21 3v5h-5"></path>
              <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"
              ></path>
              <path d="M3 21v-5h5"></path>
            </svg>
          </button>
          <button
            id="copyBtn"
            class="cursor-pointer p-2 rounded hover:bg-emerald-700/30 transition-colors duration-200"
            title="Copiar contraseña"
          >
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
              <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
              ></path>
            </svg>
          </button>
        </div>
      </div>
    </div>

    <!-- Options -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      <div class="space-y-4">
        <div>
          <label
            for="length"
            class="block text-sm font-medium text-neutral-300 mb-2"
            >{getTranslation(lang, "common.lengthLabel")}</label
          >
          <input
            type="number"
            id="length"
            value="14"
            min="5"
            max="128"
            class="w-full px-3 py-2 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm text-neutral-100 focus:outline-none focus:ring-2"
          />
          <p
            class="text-xs opacity-75 leading-relaxed mt-1 text-neutral-400 line-clamp-2"
          >
            {getTranslation(lang, "components.passwordGenerator.valuesBetween")}
          </p>
        </div>

        <div>
          <h4 class="text-sm font-semibold text-neutral-300 mb-2">
            {getTranslation(lang, "common.include")}
          </h4>
          <div class="grid grid-cols-2 gap-1">
            <label
              class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-900/60 rounded-lg px-3 py-2 transition hover:bg-emerald-800/10 focus-within:ring-2 focus-within:ring-emerald-500"
            >
              <input
                type="checkbox"
                id="includeAZ"
                checked
                class="accent-emerald-500 w-3.5 h-3.5 rounded border-neutral-700 focus:ring-2 focus:ring-emerald-500 transition"
              />
              <span class="font-medium text-neutral-200">A-Z</span>
            </label>
            <label
              class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-900/60 rounded-lg px-3 py-2 transition hover:bg-emerald-800/10 focus-within:ring-2 focus-within:ring-emerald-500"
            >
              <input
                type="checkbox"
                id="includear"
                checked
                class="accent-emerald-500 w-3.5 h-3.5 rounded border-neutral-700 focus:ring-2 focus:ring-emerald-500 transition"
              />
              <span class="font-medium text-neutral-200">a-z</span>
            </label>
            <label
              class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-900/60 rounded-lg px-3 py-2 transition hover:bg-emerald-800/10 focus-within:ring-2 focus-within:ring-emerald-500"
            >
              <input
                type="checkbox"
                id="include09"
                checked
                class="accent-emerald-500 w-3.5 h-3.5 rounded border-neutral-700 focus:ring-2 focus:ring-emerald-500 transition"
              />
              <span class="font-medium text-neutral-200">0-9</span>
            </label>
            <label
              class="flex items-center gap-2 cursor-pointer text-sm bg-neutral-900/60 rounded-lg px-3 py-2 transition hover:bg-emerald-800/10 focus-within:ring-2 focus-within:ring-emerald-500"
            >
              <input
                type="checkbox"
                id="includeSymbols"
                class="accent-emerald-500 w-3.5 h-3.5 rounded border-neutral-700 focus:ring-2 focus:ring-emerald-500 transition"
              />
              <span class="font-medium text-neutral-200">!@#$%*&*</span>
            </label>
          </div>
        </div>
      </div>

      <div class="space-y-4">
        <div class="grid grid-cols-2 gap-4 mb-0">
          <div class="flex flex-col justify-between">
            <label
              for="minNumbers"
              class="block text-sm font-medium text-neutral-300 mb-2"
              >{getTranslation(lang, "common.minimumNumbers")}</label
            >
            <input
              type="number"
              id="minNumbers"
              value="1"
              min="0"
              class="w-full px-3 py-2 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm text-neutral-100 focus:outline-none focus:ring-2"
            />
          </div>
          <div class="flex flex-col justify-between">
            <label
              for="minSpecial"
              class="block text-sm font-medium text-neutral-300 mb-2"
              >{getTranslation(lang, "common.minimunSpecialChars")}</label
            >
            <input
              type="number"
              id="minSpecial"
              value="0"
              min="0"
              class="w-full px-3 py-2 bg-neutral-900/60 border border-neutral-700 rounded-lg text-sm text-neutral-100 focus:outline-none focus:ring-2"
            />
          </div>
        </div>
        <div class="bg-neutral-900/60 rounded-lg">
          <span
            class="text-xs opacity-75 leading-relaxed mt-1 text-neutral-400 line-clamp-2"
            >{getTranslation(lang, "components.passwordGenerator.tip")}</span
          >
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { PasswordGenerator } from "@interfaces/text/PasswordGenerator";
  import type { PasswordOptions } from "@interfaces/text/PasswordGenerator";
  import { actions } from "astro:actions";

  document.addEventListener("astro:page-load", () => {
    const generator = new PasswordGenerator();

    const passwordInput = document.getElementById(
      "generatedPassword"
    ) as HTMLInputElement;
    const refreshBtn = document.getElementById(
      "refreshBtn"
    ) as HTMLButtonElement;
    const copyBtn = document.getElementById("copyBtn") as HTMLButtonElement;

    // si algun elemento no existe, salir
    if (!passwordInput || !refreshBtn || !copyBtn) return;

    // Función para obtener las opciones actuales
    function getCurrentOptions(): PasswordOptions {
      return {
        length: parseInt(
          (document.getElementById("length") as HTMLInputElement).value
        ),
        includeUppercase: (
          document.getElementById("includeAZ") as HTMLInputElement
        ).checked,
        includeLowercase: (
          document.getElementById("includear") as HTMLInputElement
        ).checked,
        includeNumbers: (
          document.getElementById("include09") as HTMLInputElement
        ).checked,
        includeSymbols: (
          document.getElementById("includeSymbols") as HTMLInputElement
        ).checked,
        minNumbers: parseInt(
          (document.getElementById("minNumbers") as HTMLInputElement).value
        ),
        minSpecial: parseInt(
          (document.getElementById("minSpecial") as HTMLInputElement).value
        ),
      };
    }

    // Función para generar nueva contraseña
    function generateNewPassword(): void {
      try {
        const options = getCurrentOptions();
        const newPassword = generator.generatePassword(options);
        passwordInput.value = newPassword;
        actions.createUpdateProcessCount({
          process_name: "password-generator",
        });
      } catch (error) {
        alert(
          error instanceof Error ? error.message : "Error generando contraseña"
        );
      }
    }

    // Función para copiar al portapapeles
    async function copyToClipboard(): Promise<void> {
      try {
        await navigator.clipboard.writeText(passwordInput.value);

        // Feedback visual
        const originalHTML = copyBtn.innerHTML;
        copyBtn.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 6L9 17l-5-5"></path>
        </svg>
      `;

        setTimeout(() => {
          copyBtn.innerHTML = originalHTML;
        }, 2000);
      } catch (error) {
        // Fallback para navegadores que no soportan clipboard API
        passwordInput.select();
        document.execCommand("copy");
      }
    }

    // Event listeners
    refreshBtn.addEventListener("click", generateNewPassword);
    copyBtn.addEventListener("click", copyToClipboard);

    // Regenerar contraseña cuando cambien las opciones
    document
      .querySelectorAll('input[type="checkbox"], input[type="number"]')
      .forEach((input) => {
        input.addEventListener("change", generateNewPassword);
      });

    // Manejar tabs (funcionalidad básica)
    document.querySelectorAll(".tab").forEach((tab) => {
      tab.addEventListener("click", (e) => {
        document
          .querySelectorAll(".tab")
          .forEach((t) => t.classList.remove("active"));
        (e.target as HTMLElement).classList.add("active");
      });
    });

    // Validación de longitud solo al perder el foco
    const lengthInput = document.getElementById("length") as HTMLInputElement;
    lengthInput.addEventListener("blur", () => {
      let value = parseInt(lengthInput.value);
      if (isNaN(value) || value < 5) value = 5;
      if (value > 128) value = 128;
      lengthInput.value = value.toString();
      generateNewPassword();
    });

    // Generar contraseña inicial
    generateNewPassword();
  });
</script>
