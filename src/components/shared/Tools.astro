---
import { getTranslatedTools } from "../../utils/tools";
import type { Language } from "../../types/language.type";

interface Props {
  categoryId?: string;
  t: any;
}

const lang = Astro.currentLocale as Language;

const { categoryId = "all", t: translations } = Astro.props;

// Obtener herramientas con traducciones aplicadas
const translatedTools = getTranslatedTools(categoryId, translations);

// Mapear las herramientas al formato esperado por el HTML
const tools = translatedTools.map((tool) => ({
  title: tool.name,
  desc: tool.description,
  badge: tool.translatedBadge,
  isAvailable: tool.isAvailable,
  href: tool.href,
}));
---

<div
  class="mt-6 grid gap-4 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 select-none"
>
  {
    tools.map((tool) => (
      <div
        id={tool.title}
        class="sequence-item-tool opacity-0 flex flex-col justify-between group rounded-2xl border border-neutral-800 bg-neutral-800/50 p-4 hover:border-emerald-600/60 hover:shadow-[0_0_0_1px_rgba(16,185,129,0.25)] transition"
      >
        <div class="flex items-start justify-between gap-2">
          <h2 class="font-semibold leading-snug">{tool.title}</h2>
          {tool.badge && (
            <span class="text-[10px] rounded-full px-2 py-0.5 bg-neutral-800 border border-neutral-700 text-neutral-300">
              {tool.badge}
            </span>
          )}
        </div>
        <p class="mt-1 text-sm text-neutral-400 line-clamp-2">{tool.desc}</p>
        <div class="mt-4 flex items-center justify-between">
          <a
            title={tool.title}
            href={`/${lang}${tool.href}`}
            class:list={[
              "cursor-pointer text-sm text-emerald-400",
              !tool.isAvailable &&
                "pointer-events-none text-neutral-600 hidden",
              tool.isAvailable && "hover:underline",
            ]}
          >
            {translations.tools.actions.open}
          </a>
          <span
            class="shortcut text-xs text-neutral-400 hidden xl:inline"
            data-mac-text={translations.tools.actions.searchShortcut}
            data-win-text={translations.tools.actions.searchShortcutWin}
          >
            {translations.tools.actions.searchShortcut}
          </span>
        </div>
      </div>
    ))
  }
</div>

<script>
  import { animateSequenceItems } from "../../animate/timeline";

  const initWindowsOrMac = () => {
    const isMac = navigator.userAgent.indexOf("Mac OS X") != -1;
    document.querySelectorAll(".shortcut").forEach((el) => {
      const macText = el.getAttribute("data-mac-text") || "⌘K to search";
      const winText = el.getAttribute("data-win-text") || "Ctrl+K to search";
      el.textContent = isMac ? macText : winText;
    });
  };

  const initSequenceAnimation = () => {
    animateSequenceItems(".sequence-item-tool");
  };

  const init = () => {
    initSequenceAnimation();
    initWindowsOrMac();
  };

  // Múltiples listeners para asegurar la ejecución
  document.addEventListener("astro:page-load", init);
  document.addEventListener("DOMContentLoaded", init);
</script>
