---
import { getToolById } from "@constants/tools";
import type { Language } from "@@types/language.type";
import { getTranslation } from "@i18n/index";

const lang = Astro.params.lang as Language;

interface Process {
  id: number;
  process_name: string;
  count: number;
}

interface ProcessItem {
  success: boolean;
  topProcesses: Process[];
}

const process = [] as { name: string; progress: number }[];

try {
  const response = await fetch(`${Astro.site?.href}api/process-count/top`);
  const data = (await response.json()) as ProcessItem;

  if (data && data.success && data.topProcesses) {
    data.topProcesses.forEach((p) => {
      const tool = getToolById(p.process_name);
      if (tool) {
        process.push({ name: tool.name, progress: p.count });
      }
    });
  }
} catch (error) {}
---

<div
  id="process-summary"
  class="rounded-2xl border border-neutral-800 bg-neutral-800/50"
>
  <div class="p-4 border-b border-neutral-700">
    <h3 class="font-semibold">
      {getTranslation(lang, "components.processSummary.title")}
    </h3>
  </div>
  <ul class="p-4 space-y-4">
    {
      process.length === 0 && (
        <li class="text-sm text-neutral-400">
          {getTranslation(lang, "common.noData")}
        </li>
      )
    }
    {
      process.map((p, index) => (
        <li id={`process-${index}`} class="flex justify-between items-center">
          <p class="text-sm text-neutral-300">{p.name}</p>
          <p
            class="process-count-up text-sm text-neutral-400 mt-1 count-up-number"
            data-target={p.progress}
          >
            0
          </p>
        </li>
      ))
    }
  </ul>
</div>

<script>
  import { animateCountUp } from "../../animate/timeline";

  document.addEventListener("astro:page-load", () => {
    animateCountUp(".process-count-up");
  });
</script>
