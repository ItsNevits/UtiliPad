---
import { Picture } from "astro:assets";
import type { Language } from "@/types/language.type";
import { getTranslatedTools, getTranslatedCategories } from "@/utils/tools";
import ImageEditor from "@/assets/images/ImageEditor.png";

interface Props {
  title?: string;
  toolsPerPage?: number;
}

const { title = "All Tools", toolsPerPage = 10 } = Astro.props;
const lang = (Astro.params.lang as Language) || "es";

// Obtener todas las categorías con traducciones
const categories = getTranslatedCategories(lang);

// Agregar categoría "All" al principio
const allCategories = [
  { id: "all", name: lang === "es" ? "Todos" : "All" },
  ...categories,
];

// Obtener todas las herramientas con traducciones
const allTools = getTranslatedTools("all", lang);

// Textos de paginación
const paginationTexts = {
  previous: lang === "es" ? "Anterior" : "Previous",
  next: lang === "es" ? "Siguiente" : "Next",
  of: lang === "es" ? "de" : "of",
};
---

<section class="select-none mb-8">
  <h2 class="text-2xl font-semibold mb-6">{title}</h2>

  <!-- Category Tabs -->
  <div class="flex gap-6 mb-6 border-b border-neutral-700 overflow-x-auto">
    {
      allCategories.map((category, index) => (
        <button
          class:list={[
            "cursor-pointer pb-2 px-1 transition-colors relative whitespace-nowrap",
            index === 0
              ? "text-white border-b-2 border-emerald-500"
              : "text-neutral-400 hover:text-neutral-200",
          ]}
          data-category={category.id}
        >
          {category.name}
        </button>
      ))
    }
  </div>

  <!-- Tools Grid -->
  <div
    class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4 sm:gap-6"
  >
    {
      allTools.map((tool) => {
        // Determinar la categoría de la herramienta
        const toolCategory = categories.find((cat) =>
          cat.tools?.some((t) => t.id === tool.id)
        );

        return (
          <a
            href={`/${lang}${tool.href}`}
            class:list={[
              "flex flex-col items-center group",
              !tool.isAvailable &&
                "opacity-50 cursor-not-allowed pointer-events-none",
            ]}
            title={tool.description}
            data-tool-category={toolCategory?.id || ""}
            data-available={tool.isAvailable}
          >
            <div class="relative w-full aspect-square rounded-lg mb-3 overflow-hidden bg-gradient-to-br from-neutral-800 to-neutral-900 p-6 group-hover:scale-101 transition-transform">
              <Picture
                src={ImageEditor}
                alt={tool.name}
                class="w-full h-full object-contain"
              />
              {tool.translatedBadge && (
                <span class="absolute top-2 right-2 bg-emerald-500 text-white text-xs px-2 py-1 rounded-full">
                  {tool.translatedBadge}
                </span>
              )}
            </div>
            <h3 class="text-sm font-light text-center">{tool.name}</h3>
          </a>
        );
      })
    }
  </div>
</section>

<script>
  const categoryButtons = document.querySelectorAll("[data-category]");
  const toolCards = document.querySelectorAll("[data-tool-category]");

  categoryButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const selectedCategory = button.getAttribute("data-category");

      // Update active button styling
      categoryButtons.forEach((btn) => {
        if (btn === button) {
          btn.classList.remove("text-neutral-400", "border-b-2");
          btn.classList.add("text-white", "border-b-2", "border-emerald-500");
        } else {
          btn.classList.remove(
            "text-white",
            "border-b-2",
            "border-emerald-500"
          );
          btn.classList.add("text-neutral-400");
        }
      });

      // Filter tools
      toolCards.forEach((card) => {
        const cardCategory = card.getAttribute("data-tool-category");
        const isAvailable = card.getAttribute("data-available") === "true";

        if (selectedCategory === "all" || cardCategory === selectedCategory) {
          (card as HTMLElement).style.display = "flex";
        } else {
          (card as HTMLElement).style.display = "none";
        }
      });
    });
  });
</script>
