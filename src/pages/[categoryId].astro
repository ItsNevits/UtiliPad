---
export const prerender = false;

import MainLayout from "../Layouts/MainLayout.astro";
import Hero from "../components/shared/Hero.astro";
import Tools from "../components/shared/Tools.astro";
import BreadCrumbs from "../components/shared/BreadCrumbs.astro";
import { TOOLS_CATEGORIES, getToolById } from "../constants/tools";

// Importar componentes de herramientas
import WordCounter from "@components/tools/WordCounter.astro";
import JsonFormatter from "../components/tools/JsonFormatter.astro";

// Mapeo de componentes
const COMPONENT_MAP = {
  WordCounter: WordCounter,
  JsonFormatter: JsonFormatter,
  // "ImageCompressor": ImageCompressor,
  // "FileConverter": FileConverter,
};

// Obtener el parámetro de la URL
const { categoryId } = Astro.params;

// Obtener el parámetro de query 'tool' si existe
const toolId = Astro.url.searchParams.get("tool");

// Buscar la categoría correspondiente
const category = TOOLS_CATEGORIES.find((cat) => cat.id === categoryId);

// Si no existe la categoría, retornar 404
if (!category) {
  return Astro.redirect("/404");
}

// Si hay un toolId específico, buscar la herramienta
let selectedTool = null;
if (toolId) {
  selectedTool = getToolById(toolId);
  // Verificar que la herramienta pertenezca a esta categoría
  if (!selectedTool || !category.tools.find((tool) => tool.id === toolId)) {
    return Astro.redirect("/404");
  }
}

// Configurar el contenido del hero basado en si hay una herramienta específica
const currentHero = selectedTool
  ? {
      title: selectedTool.name,
      description: selectedTool.description,
    }
  : {
      title: category.title,
      description: category.description,
    };

// Obtener el componente correspondiente si existe
let ToolComponent = null;
if (
  selectedTool?.component &&
  COMPONENT_MAP[selectedTool.component as keyof typeof COMPONENT_MAP]
) {
  ToolComponent =
    COMPONENT_MAP[selectedTool.component as keyof typeof COMPONENT_MAP];
}

// Generar breadcrumbs
const breadcrumbs = [];
if (selectedTool) {
  // Para herramienta específica: Inicio > Categoría > Herramienta
  breadcrumbs.push(
    { href: `/${categoryId}`, name: category.name, isActive: false },
    { href: selectedTool.href, name: selectedTool.name, isActive: true }
  );
} else {
  // Para categoría: Inicio > Categoría
  breadcrumbs.push({
    href: `/${categoryId}`,
    name: category.name,
    isActive: true,
  });
}

// Generar las rutas estáticas para todas las categorías
export async function getStaticPaths() {
  return TOOLS_CATEGORIES.map((category) => ({
    params: { categoryId: category.id },
  }));
}
---

<MainLayout>
  {selectedTool ? <BreadCrumbs links={breadcrumbs} /> : null}

  <!-- Hero -->
  <Hero title={currentHero.title} description={currentHero.description} />

  {
    selectedTool ? (
      <div class="container mx-auto py-5 select-none">
        {ToolComponent ? (
          <ToolComponent />
        ) : (
          <div class="bg-neutral-900/40 rounded-2xl border border-neutral-800 p-6">
            <span>Sin implementar</span>
          </div>
        )}

        <div class="mt-8">
          <h3 class="text-lg font-semibold mb-4">
            Otras herramientas de {category.name}
          </h3>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {category.tools
              .filter((tool) => tool.id !== selectedTool.id)
              .map((tool) => (
                <a
                  href={tool.href}
                  class="block p-4 bg-neutral-900/40 rounded-xl border border-neutral-800 hover:border-emerald-600/60 transition-colors"
                >
                  <h4 class="font-medium mb-1">{tool.name}</h4>
                  <p class="text-sm text-neutral-400">{tool.description}</p>
                </a>
              ))}
          </div>
        </div>
      </div>
    ) : (
      <Tools categoryId={categoryId} />
    )
  }
</MainLayout>
