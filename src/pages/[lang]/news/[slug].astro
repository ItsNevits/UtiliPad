---
export const prerender = true;
import Hero from "@components/shared/Hero.astro";
import MainLayout from "src/Layouts/MainLayout.astro";
import BreadCrumbs from "@components/shared/BreadCrumbs.astro";

import { getCollection } from "astro:content";
import type { Language } from "@@types/language.type";
import { getTranslation } from "@i18n/index";

const lang = Astro.params.lang as Language;

export async function getStaticPaths() {
  const news = await getCollection("news");
  const languages = ["es", "en"];

  return languages.flatMap((lang) => {
    // Filtrar noticias por idioma basándose en la estructura de carpetas
    const newsForLang = news.filter((entry) => {
      // Normalizar las barras para manejar Windows y Unix
      const normalizedId = entry.id.replace(/\\/g, "/");
      return normalizedId.startsWith(`${lang}/`);
    });

    return newsForLang.map((entry) => {
      // Extraer el slug sin la carpeta del idioma
      const normalizedId = entry.id.replace(/\\/g, "/");
      const slug = normalizedId.replace(`${lang}/`, "");
      return {
        params: { slug, lang },
        props: { entry, lang },
      };
    });
  });
}

const { entry } = Astro.props;
const { Content } = await entry.render();
---

<MainLayout
  title={getTranslation(lang, "seo.pages.news.title")}
  description={getTranslation(lang, "seo.pages.news.description")}
>
  <BreadCrumbs
    links={[
      {
        href: `/${lang}/news`,
        name: getTranslation(lang, "common.breadCrumbsOptions.news"),
      },
      {
        href: `/${lang}/news/${entry.id.replace(/\\/g, "/").replace(`${lang}/`, "")}`,
        name: entry.data.title,
        isActive: true,
      },
    ]}
  />
  <Hero
    title={entry.data.title}
    description={`Publicado el ${entry.data.date.toLocaleDateString("es-ES", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })}`}
  />

  <article class="prose prose-invert prose-lg max-w-none mt-8">
    <!-- Metadatos del artículo -->
    <div class="border-b border-neutral-700 pb-6 mb-8">
      <div class="flex flex-wrap gap-2 mb-4">
        {
          entry.data.tags?.map((tag) => (
            <span class="px-3 py-1 bg-green-500/20 text-green-400 rounded-full text-sm">
              {tag}
            </span>
          ))
        }
      </div>
      <div class="flex items-center gap-4 text-sm text-neutral-400">
        <span>Por {entry.data.author}</span>
        <span>•</span>
        <time datetime={entry.data.date.toISOString()}>
          {
            entry.data.date.toLocaleDateString("es-ES", {
              year: "numeric",
              month: "long",
              day: "numeric",
            })
          }
        </time>
      </div>
    </div>

    <!-- Contenido del artículo -->
    <Content />
  </article>
</MainLayout>
