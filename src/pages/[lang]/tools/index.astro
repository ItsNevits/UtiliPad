---
import MainLayout from "@/Layouts/MainLayout.astro";
import Header from "@/components/Header.astro";
import Hero from "@/components/shared/Hero.astro";
import Footer from "@/components/Footer.astro";

import { Picture } from "astro:assets";
import ImageEditor from "@/assets/images/ImageEditor.png";

import { getTranslation } from "@/i18n/index";
import type { Language } from "@/types/language.type";
import { getTranslatedCategories, getTranslatedTools } from "@/utils/tools";

const lang = Astro.params.lang as Language;
const categories = getTranslatedCategories(lang);
---

<MainLayout
  title={getTranslation(lang, "seo.pages.tools.title")}
  description={getTranslation(lang, "seo.pages.tools.description")}
>
  <div class="bg-[#dddfe0] m-4 rounded-2xl pb-10 md:pb-15">
    <Header />
    <section class="w-full max-w-7xl mx-auto flex flex-col">
      <Hero
        title={getTranslation(lang, "pages.tools.title")}
        description={getTranslation(lang, "pages.tools.description")}
        showSearch={true}
      />
    </section>
  </div>

  <main class="max-w-7xl w-full mx-auto px-4 pb-6 mb-8 md:mb-12">
    <!-- Tabs de categorías -->
    <div class="mb-6">
      <div class="border-b border-neutral-200 overflow-x-auto">
        <nav class="flex gap-1 min-w-max" role="tablist">
          <button
            class="cursor-pointer tab-button px-4 py-3 text-sm font-semibold text-neutral-600 hover:text-emerald-600 border-b-2 border-transparent hover:border-emerald-500 transition-colors whitespace-nowrap"
            data-category="all"
            role="tab"
          >
            {getTranslation(lang, "pages.tools.allCategories")}
          </button>
          {
            categories.map((category) => (
              <button
                class="cursor-pointer tab-button px-4 py-3 text-sm font-semibold text-neutral-600 hover:text-emerald-600 border-b-2 border-transparent hover:border-emerald-500 transition-colors whitespace-nowrap"
                data-category={category.id}
                role="tab"
              >
                {category.name}
              </button>
            ))
          }
        </nav>
      </div>
    </div>

    <!-- Contenido de las categorías -->
    <div id="tools-container">
      {
        ["all", ...categories.map((c) => c.id)].map((categoryId) => {
          const tools = getTranslatedTools(categoryId, lang);
          const category = categories.find((c) => c.id === categoryId);

          return (
            <div
              class="tab-content hidden"
              data-category={categoryId}
              role="tabpanel"
            >
              {category && (
                <div class="mb-6 p-5 bg-white rounded-xl border border-neutral-200 shadow-sm">
                  <h2 class="text-xl font-bold text-neutral-800 mb-2">
                    {category.title}
                  </h2>
                  <p class="text-sm text-neutral-600">{category.description}</p>
                </div>
              )}

              {categoryId === "all" && (
                <div class="mb-6 p-5 bg-white rounded-xl border border-neutral-200 shadow-sm">
                  <h2 class="text-xl font-bold text-neutral-800 mb-2">
                    {getTranslation(lang, "pages.tools.allCategories")}
                  </h2>
                  <p class="text-sm text-neutral-600">
                    {getTranslation(lang, "pages.tools.description")}
                  </p>
                </div>
              )}

              <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                {tools.map((tool) => (
                  <a
                    href={`/${lang}${tool.href}`}
                    class:list={[
                      "group bg-white border border-neutral-200 rounded-xl p-5 hover:shadow-lg hover:border-neutral-300 transition-all",
                      !tool.isAvailable &&
                        "opacity-60 cursor-not-allowed pointer-events-none",
                    ]}
                  >
                    <div class="flex items-start gap-4 mb-3">
                      <div class="relative w-14 h-14 flex-shrink-0 rounded-lg overflow-hidden bg-gradient-to-br from-neutral-800 to-neutral-900 p-2">
                        <Picture
                          src={ImageEditor}
                          alt={tool.name}
                          class="w-full h-full object-contain"
                        />
                      </div>
                      <div class="flex-1 min-w-0">
                        <h3 class="text-base font-bold text-neutral-800 group-hover:text-emerald-600 transition-colors mb-1 line-clamp-1">
                          {tool.name}
                        </h3>
                        {tool.translatedBadge && (
                          <span class="inline-block px-2 py-0.5 bg-emerald-100 text-emerald-700 rounded-full text-xs font-medium">
                            {tool.translatedBadge}
                          </span>
                        )}
                      </div>
                    </div>
                    <p class="text-sm text-neutral-600 leading-relaxed line-clamp-2">
                      {tool.description}
                    </p>
                  </a>
                ))}
              </div>

              {tools.length === 0 && (
                <div class="text-center py-16">
                  <div class="w-16 h-16 bg-neutral-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg
                      class="w-8 h-8 text-neutral-400"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"
                      />
                    </svg>
                  </div>
                  <h3 class="text-lg font-semibold text-neutral-700 mb-2">
                    {getTranslation(lang, "common.noData")}
                  </h3>
                  <p class="text-neutral-500 text-sm">
                    {getTranslation(lang, "pages.news.noPostsDesc")}
                  </p>
                </div>
              )}
            </div>
          );
        })
      }
    </div>
  </main>
  <Footer />
</MainLayout>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tabs = document.querySelectorAll(".tab-button");
    const contents = document.querySelectorAll(".tab-content");

    // Activar la primera tab por defecto
    if (tabs.length > 0 && contents.length > 0) {
      tabs[0].classList.add("active-tab");
      contents[0].classList.remove("hidden");
    }

    tabs.forEach((tab) => {
      tab.addEventListener("click", () => {
        const category = tab.getAttribute("data-category");

        // Remover clase activa de todos los tabs
        tabs.forEach((t) => t.classList.remove("active-tab"));
        // Añadir clase activa al tab clickeado
        tab.classList.add("active-tab");

        // Ocultar todos los contenidos
        contents.forEach((content) => content.classList.add("hidden"));
        // Mostrar el contenido correspondiente
        const targetContent = document.querySelector(
          `.tab-content[data-category="${category}"]`
        );
        if (targetContent) {
          targetContent.classList.remove("hidden");
        }
      });
    });
  });
</script>
