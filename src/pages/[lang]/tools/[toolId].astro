---
export const prerender = false;

import MainLayout from "@/Layouts/MainLayout.astro";
import Hero from "@/components/shared/Hero.astro";
import BreadCrumbs from "@/components/shared/BreadCrumbs.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";

// ⭐ New architecture components (features-based)
import JsonFormatter from "@/features/tools/json-formatter/JsonFormatter.astro";
import PasswordGenerator from "@/features/tools/password-generator/PasswordGenerator.astro";
import TextAnalyzer from "@/features/tools/text-analyzer/TextAnalyzer.astro";
import QrGenerator from "@/features/tools/qr-generator/QrGenerator.astro";
import ImageCompressor from "@/features/tools/image-compressor/ImageCompressor.astro";
import ImageConverter from "@/features/tools/image-converter/ImageConverter.astro";
import FileConverter from "@/features/tools/file-converter/FileConverter.astro";
import ZipCompressor from "@/features/tools/zip-compressor/ZipCompressor.astro";
import Base64Converter from "@/features/tools/base64-converter/Base64Converter.astro";
import HashGenerator from "@/features/tools/hash-generator/HashGenerator.astro";
import AESCipher from "@/features/tools/aes-cipher/AESCipher.astro";

import { TOOLS_CATEGORIES, getToolById } from "@/config/tools.config";
import type { Language } from "@/types/language.type";
import { getTranslation } from "@/i18n/index";

// Obtener parámetros
const { toolId } = Astro.params;
const lang = Astro.params.lang as Language;

// Mapeo de componentes
const COMPONENT_MAP = {
  // Files Components
  ZipCompressor: ZipCompressor,
  FileConverter: FileConverter,

  // Text Components
  TextAnalyzer: TextAnalyzer,
  JsonFormatter: JsonFormatter,
  QrGenerator: QrGenerator,
  PasswordGenerator: PasswordGenerator,
  Base64Converter: Base64Converter,
  HashGenerator: HashGenerator,
  AESCipher: AESCipher,

  // Images Components
  ImageConverter: ImageConverter,
  ImageCompressor: ImageCompressor,
};

// Buscar la herramienta
const tool = getToolById(toolId || "");

// Si no existe la herramienta, retornar 404
if (!tool) {
  return Astro.redirect("/404");
}

// Encontrar la categoría de la herramienta
const category = TOOLS_CATEGORIES.find((cat) =>
  cat.tools.some((t) => t.id === toolId)
);

if (!category) {
  return Astro.redirect("/404");
}

// Obtener traducciones
const getTranslatedToolName = (toolId: string, tool?: any) => {
  return (
    getTranslation(lang, `tools.items.${toolId}.name`) || tool?.name || toolId
  );
};

const getTranslatedToolDescription = (toolId: string, tool?: any) => {
  return (
    getTranslation(lang, `tools.items.${toolId}.description`) ||
    tool?.description ||
    ""
  );
};

const getTranslatedCategoryName = (categoryId: string) => {
  return (
    getTranslation(lang, `tools.categories.${categoryId}`) ||
    category?.name ||
    categoryId
  );
};

// Hero content
const toolName = getTranslatedToolName(tool.id, tool);
const toolDescription = getTranslatedToolDescription(tool.id, tool);
const categoryName = getTranslatedCategoryName(category.id);

// Obtener el componente correspondiente
let ToolComponent = null;
if (
  tool.component &&
  COMPONENT_MAP[tool.component as keyof typeof COMPONENT_MAP]
) {
  ToolComponent = COMPONENT_MAP[tool.component as keyof typeof COMPONENT_MAP];
}

// Generar breadcrumbs - Nueva estructura: Home → Tools → Herramienta
const breadcrumbs = [
  {
    href: `/${lang}/tools`,
    name: getTranslation(lang, "pages.tools.title"),
    isActive: false,
  },
  {
    href: `/${lang}/tools/${toolId}`,
    name: toolName,
    isActive: true,
  },
];

// SEO - Usar SEO específico de la herramienta si existe, sino usar template genérico
const toolSeo = getTranslation(lang, `tools.items.${tool.id}.seo`) as any;

const titleSeo =
  typeof toolSeo === "object" && toolSeo?.title
    ? toolSeo.title
    : getTranslation(lang, "seo.pages.tool.title")?.replace("{tool}", toolName);
const descriptionSeo =
  typeof toolSeo === "object" && toolSeo?.description
    ? toolSeo.description
    : getTranslation(lang, "seo.pages.tool.description")?.replace(
        "{tool}",
        toolName
      );

// Datos para SEO dinámico
const pageData = {
  tool: toolName,
  category: categoryName,
};
---

<MainLayout title={titleSeo} description={descriptionSeo} pageData={pageData}>
  <div class="bg-[#dddfe0] m-4 rounded-2xl pb-10 md:pb-15">
    <Header />
    <section class="w-full max-w-7xl mx-auto flex flex-col">
      <Hero title={toolName} description={toolDescription} />
      <!-- 
      <a
        href={`/${lang}/category/${category.id}`}
        class="px-4 py-2 bg-emerald-100 text-emerald-700 rounded-lg text-sm font-semibold hover:bg-emerald-200 transition-colors whitespace-nowrap"
      >
        {categoryName}
      </a>
      -->
    </section>
  </div>

  <!-- Breadcrumbs -->
  <div class="max-w-7xl mx-auto px-4 pt-6 w-full">
    <BreadCrumbs links={breadcrumbs} />
  </div>

  <!-- Tool Component -->
  <main class="max-w-7xl mx-auto px-4 pb-8 select-none w-full">
    {
      ToolComponent ? (
        <ToolComponent />
      ) : (
        <div class="bg-white rounded-xl border border-neutral-200 shadow-sm p-8 text-center">
          <div class="w-16 h-16 bg-neutral-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg
              class="w-8 h-8 text-neutral-400"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
              />
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-neutral-700 mb-2">
            {getTranslation(lang, "tools.messages.notImplemented")}
          </h3>
          <p class="text-neutral-500 text-sm">
            Esta herramienta está en desarrollo.
          </p>
        </div>
      )
    }

    <!-- Otras herramientas de la categoría -->
    <section class="mt-12">
      <div class="mb-6">
        <h2 class="text-xl font-bold text-neutral-800">
          {
            lang === "es"
              ? `${getTranslation(lang, "tools.messages.otherToolsPrefix")} ${categoryName.toLowerCase()}`
              : `${getTranslation(lang, "tools.messages.otherToolsPrefix")} ${categoryName.toLowerCase()} ${getTranslation(lang, "tools.messages.otherToolsSuffix")}`
          }
        </h2>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {
          category.tools
            .filter((t) => t.id !== tool.id && t.isAvailable)
            .map((t) => (
              <a
                href={`/${lang}/tools/${t.id}`}
                class="group bg-white border border-neutral-200 rounded-xl p-5 hover:shadow-lg hover:border-neutral-300 transition-all"
              >
                <h4 class="text-base font-bold text-neutral-800 group-hover:text-emerald-600 transition-colors mb-2">
                  {getTranslatedToolName(t.id, t)}
                </h4>
                <p class="text-sm text-neutral-600 leading-relaxed line-clamp-2">
                  {getTranslatedToolDescription(t.id, t)}
                </p>
              </a>
            ))
        }
        {
          category.tools.filter((t) => t.id !== tool.id && t.isAvailable)
            .length === 0 && (
            <div class="col-span-full text-center py-8">
              <p class="text-sm text-neutral-500">
                {getTranslation(lang, "tools.messages.noMoreTools")}
              </p>
            </div>
          )
        }
      </div>
    </section>
  </main>
  <Footer />
</MainLayout>
